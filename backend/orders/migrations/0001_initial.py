# Generated by Django 3.2 on 2024-10-11 08:08

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('warehouses', '0002_auto_20241011_1508'),
        ('products', '0003_auto_20241010_1552'),
    ]

    operations = [
        migrations.CreateModel(
            name='Operation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('operationExternalCode', models.CharField(max_length=50, verbose_name='Внешний код Типа операции')),
                ('operationName', models.CharField(max_length=50, verbose_name='Название Типа операции')),
                ('coefficient', models.FloatField(default=1.0, help_text='Значение влияет на общую суму заказа (поле является пользовательским). Для нулевого влияния указывать значение “1”.', validators=[django.core.validators.MinValueValidator(0.0)], verbose_name='Коэффициент ')),
            ],
            options={
                'verbose_name': 'операция',
                'verbose_name_plural': 'Операции',
                'ordering': ('operationName',),
            },
        ),
        migrations.CreateModel(
            name='PayForm',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('payFormExternalCode', models.CharField(max_length=50, verbose_name='Внешний код формы оплаты')),
                ('payFormName', models.CharField(max_length=50, verbose_name='Название формы оплаты')),
                ('vatCalculationMode', models.BooleanField(default=True, help_text='1 – цены в форме оплаты указаны с НДС. 0 – цены в форме оплаты указаны без НДС, поэтому необходимо в портале активировать логику рассечка в цены с НДС для отображения в портале', verbose_name='Признак указывающий что необходимо учитывать НДС')),
                ('orderTypeExternalCode', models.CharField(default='1', help_text='Значения 1-Заказ, 4-возврат тары', max_length=50, verbose_name='Заказ/возврат тары')),
            ],
        ),
        migrations.CreateModel(
            name='PriceList',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('productType', models.SmallIntegerField(help_text='Если на точке синхронизации установлен признак isUsePromo=0, то принимается тип продукта:для формы оплаты "1 - Заказ"- базовый = 0, акционный = 2, критический = 4, продукт микс = 7 для формы оплаты "4-возврат тары"- тара = 8Если на точке синхронизации установлен признак isUsePromo=1, то принимается тип продукта:для формы оплаты "1 - Заказ"- базовый = 0для формы оплаты "4-возврат тары"- тара = 8', verbose_name='тип продукта')),
                ('price', models.FloatField(validators=[django.core.validators.MinValueValidator(0.0)], verbose_name='цена')),
                ('vat', models.FloatField(validators=[django.core.validators.MinValueValidator(0.0)], verbose_name='Значение ставки НДС (%)')),
                ('payForm', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='prices', to='orders.payform', verbose_name='форма оплаты')),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='prices', to='products.product', verbose_name='товар')),
                ('warehouse', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='prices', to='warehouses.warehouse', verbose_name='склад')),
            ],
            options={
                'verbose_name': 'цена',
                'verbose_name_plural': 'Цены',
                'ordering': ('product',),
                'default_related_name': 'prices',
            },
        ),
        migrations.CreateModel(
            name='OutletPayForm',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('payForm', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='payform_outlets', to='orders.payform', verbose_name='форма оплаты')),
                ('warehouse', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='payforms_outlet', to='warehouses.warehouse', verbose_name='склад')),
            ],
            options={
                'verbose_name': 'форма оплаты по торговой точке',
                'verbose_name_plural': 'форма оплаты по торговым точкам',
                'ordering': ('payForm',),
            },
        ),
        migrations.CreateModel(
            name='OperationOutlet',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('operation', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='operatin_outlets', to='orders.operation', verbose_name='операция')),
                ('warehouse', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='operations_outlet', to='warehouses.warehouse', verbose_name='склад')),
            ],
            options={
                'verbose_name': 'операция по торговой точке',
                'verbose_name_plural': 'Операции по торговым точкам',
                'ordering': ('operation',),
            },
        ),
        migrations.CreateModel(
            name='DeliveryDate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('deliveryDate', models.CharField(blank=True, default='Пн, Вт, Ср, Чт, Пт', max_length=50, null=True, verbose_name='Дни доставки')),
                ('deadLine', models.CharField(blank=True, default='17:00', max_length=20, null=True, verbose_name='Граничное времени обработки заказа')),
                ('minSum', models.FloatField(blank=True, default=1.0, null=True, validators=[django.core.validators.MinValueValidator(0.0)], verbose_name='Минимальная сумма заказа')),
                ('warehouse', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='delivery_dates', to='warehouses.warehouse', verbose_name='склад')),
            ],
            options={
                'verbose_name': 'дни доставки и мин сумма',
                'verbose_name_plural': 'Дни доставки и мин суммы',
                'ordering': ('warehouse',),
            },
        ),
        migrations.AddConstraint(
            model_name='pricelist',
            constraint=models.UniqueConstraint(fields=('warehouse', 'payForm'), name='unique_warehouse_product_price'),
        ),
        migrations.AddConstraint(
            model_name='outletpayform',
            constraint=models.UniqueConstraint(fields=('warehouse', 'payForm'), name='unique_warehouse_payForm'),
        ),
        migrations.AddConstraint(
            model_name='operationoutlet',
            constraint=models.UniqueConstraint(fields=('warehouse', 'operation'), name='unique_warehouse_operation'),
        ),
    ]
